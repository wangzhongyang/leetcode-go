package Q200_Number_of_Islands

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

var tcs = []struct {
	input  [][]byte
	output int
}{
	//{
	//	input: [][]byte{
	//		{'1', '1', '1', '1', '0'},
	//		{'1', '1', '0', '1', '0'},
	//		{'1', '1', '0', '0', '0'},
	//		{'0', '0', '0', '0', '0'},
	//	},
	//	output: 1,
	//},
	//{
	//	input: [][]byte{
	//		{'1', '1'},
	//	},
	//	output: 1,
	//},
	//{
	//	input: [][]byte{
	//		{'0', '1', '0'},
	//		{'1', '0', '1'},
	//		{'0', '1', '0'},
	//	},
	//	output: 4,
	//},
	//{
	//	input: [][]byte{
	//		{'1', '0', '1', '1', '1'},
	//		{'1', '0', '1', '0', '1'},
	//		{'1', '1', '1', '0', '1'},
	//	},
	//	output: 1,
	//},
	//{
	//	input: [][]byte{
	//		{'1', '1', '1', '1', '1', '1'},
	//		{'1', '0', '0', '0', '0', '1'},
	//		{'1', '0', '1', '1', '0', '1'},
	//		{'1', '0', '0', '0', '0', '1'},
	//		{'1', '1', '1', '1', '1', '1'},
	//	},
	//	output: 2,
	//},
	{
		input: [][]byte{
			{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '0', '1', '1'},
			{'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '0'},
			{'1', '0', '1', '1', '1', '0', '0', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '0', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '0', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1'},
			{'0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '0', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1'},
			{'1', '0', '1', '1', '1', '1', '1', '0', '1', '1', '1', '0', '1', '1', '1', '1', '0', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '1', '1', '0'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '0', '1', '1', '1', '1', '0', '0'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
			{'1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'},
		},
		output: 1,
	},
}

func Test_numIslands(t *testing.T) {
	a := assert.New(t)
	for _, item := range tcs {
		output := numIslands(item.input)
		a.Equal(item.output, output)
	}
}
